#!/bin/bash

CONFIG_FILE="$HOME/project_config_for_current_path.yaml"
ALLOWED_WORKFLOWS=("lightorch" "ml-arch")
ALLOWED_GH_ACTIONS=("cpp" "python" "pypi")

create_config() {
    cat > "$CONFIG_FILE" << EOL
PROJECT_NAME:
WORKFLOWS:
  -
ACTIONS:
  -
DESCRIPTION:none
LICENSE:none
PUBLIC:false
EOL
    echo "Configuration file created at $CONFIG_FILE"
    echo "Please edit the file with your desired configuration."
    echo "Press any key to continue when you're done editing..."
    read -n 1 -s
}

parse_config() {
    PROJECT_NAME=$(yq eval '.PROJECT_NAME' "$CONFIG_FILE")
    WORKFLOWS=$(yq eval '.TYPE' "$CONFIG_FILE")
    ACTIONS=$(yq eval '.ACTIONS' "$CONFIG_FILE")
    DESCRIPTION=$(yq eval '.DESCRIPTION' "$CONFIG_FILE")
    LICENSE=$(yq eval '.LICENSE' "$CONFIG_FILE")
    PUBLIC=$(yq eval '.PUBLIC' "$CONFIG_FILE")
}

setup_files () {
    source "$HOME/.local/scripts/general_workflow"
    for val in "${WORKFLOWS[@]}"; do
        setup "$val" "$HOME/projects/"$PROJECT_NAME""
    done
}

assert () {
    for item in "${WORKFLOWS[@]}"
    do
        flag=0
        for allowed in "${ALLOWED_WORKFLOWS[@]}"
        do
            if [[ "$item" == "$allowed" ]]; then
                flag=$((flag + 1))
            fi
        done
        if [[ $flag -eq 0 ]]; then
            echo "Invalid project workflow: $item"
            exit 1
        else
            echo "Set up workflows for: $item"
        fi
    done
    for item in "${ACTIONS[@]}"
    do
        flag=0
        for allowed in "${ALLOWED_GH_ACTIONS[@]}"
        do
            if [[ "$item" == "$allowed" ]]; then
                flag=$((flag + 1))
            fi
        done
        if [[ $flag -eq 0 ]]; then
            echo "Invalid github actions: $item"
            exit 1
        else
            echo "Set up actions for: $item"
        fi
    done
}

setup_gh_actions () {
    local target_path="$HOME/projects/"$PROJECT_NAME"/.github/workflows/"
    mkdir -p "$target_path"
    for val in "${ACTIONS[@]}"; do
        cp "$HOME/.local/scripts/gh_templates/"$val".yml" "$target_path"
    done
}

get_repo_command () {
    cmd_line=("gh repo create $PROJECT_NAME")

    if [[ "$PUBLIC" == "true" ]]; then
        cmd_line+=("--public")
    elif [[ "$PUBLIC" == "false" ]]; then
        cmd_line+=("--private")
    else
        echo "Not valid PUBLIC value. Should be boolean: [true, false]"
        exit 1
    fi

    if [[ "$DESCRIPTION" != "none" && "$DESCRIPTION" != "false" ]]; then
        cmd_line+=("--description" "$DESCRIPTION")
    fi

    if [[ "$LICENSE" != "none" ]]; then
        cmd_line+=("--license" "$LICENSE")
    fi

    echo "${cmd_line[@]}"
}

setup_repository () {
    create_config
    parse_config
    rm -f "$CONFIG_FILE"
    assert
    command=$(get_repo_command)
    eval "$command"
    setup_gh_actions
    setup_files
    git init
    git add .
    git commit -m "Initial commit"
    git push origin main
    echo "Project $PROJECT_NAME has been set up and linked to remote repository https://github.com/Jorgedavyd/$PROJECT_NAME."
}

setup_repository
