#!/bin/bash

DOTFILES_REPO="https://github.com/Jorgedavyd/.dotfiles.git"
DOTFILES_DIR="$HOME/.dotfiles"

xinit() {
  if [[ ! -f "$HOME/.xinitrc" ]]; then
    echo "Creating .xinitrc file..."
    echo -e "#!/bin/sh\nexec i3" > "$HOME/.xinitrc"
    chmod +x "$HOME/.xinitrc"
  else
    echo ".xinitrc file already exists"
  fi
}

installDependencies() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
      if command -v apt-get &> /dev/null; then
        sudo apt-get update
        sudo apt-get install -y stow ripgrep wget tmux i3
        wget --proto '=https' --tlsv1.3 -sSf https://sh.rustup.rs | sh
        rustup default stable
        cargo install alacritty
        sudo apt-get install software-properties-common
        sudo add-apt-repository ppa:neovim-ppa/stable
        sudo apt-get update
        sudo apt-get install neovim
      elif command -v pacman &> /dev/null; then
        sudo pacman -Syu --noconfirm stow ripgrep fzf tmux i3-wm neovim alacritty xorg
        wget --proto '=https' --tlsv1.3 -sSf https://sh.rustup.rs | sh
        rustup default stable
      elif command -v yum &> /dev/null; then
        sudo yum install -y stow ripgrep tmux i3-wm neovim alacritty xorg fzf
        wget --proto '=https' --tlsv1.3 -sSf https://sh.rustup.rs | sh
        rustup default stable
      fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      if ! command -v brew &> /dev/null; then
        echo "Homebrew not found, installing..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
      brew install stow ripgrep wget tmux i3 fzf
      brew install --cask alacritty
      brew install neovim
    fi
    else
    echo "stow is already installed"
}

clone_dotfiles() {
  if [ -d "$DOTFILES_DIR" ]; then
    echo "$DOTFILES_DIR already exists, pulling latest changes..."
    cd "$DOTFILES_DIR"
    git pull
  else
    echo "Cloning dotfiles repository..."
    git clone "$DOTFILES_REPO" "$DOTFILES_DIR"
  fi
}

update_submodules() {
  echo "Initializing and updating submodules..."
  cd "$DOTFILES_DIR"
  git submodule update --init --recursive
}

set_permission() {
  chmod --recursive +x $DOTFILES_DIR/scripts/.local/scripts/*
}

stow_dotfiles() {
  echo "Creating symlinks using stow..."
  cd "$DOTFILES_DIR"
  for dir in */; do
    stow "${dir%/}"
  done
}

display_success_message() {
  echo "Dotfiles have been set up successfully."
}

main() {
  installDependencies
  clone_dotfiles
  update_submodules
  set_permission
  stow_dotfiles
  display_success_message
  xinit
}

main

